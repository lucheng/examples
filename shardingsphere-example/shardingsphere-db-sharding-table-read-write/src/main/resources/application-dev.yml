server:
  port: 8080
spring:
  profiles:
    active: dev
  http:
    encoding:
      charset: utf-8
      force: true
      enabled: true
  messages:
    encoding: utf-8
  banner:
    charset: utf-8
  redis:
    host: 127.0.0.1
#    password: redis_test1113
    port: 6379
    timeout: 10000
#    database: 0
#    jedis:
#      pool:
#        max-active: 1000
#        max-idle: 10
#        min-idle: 0
#        max-wait: -1
#    cluster:
#      nodes: 172.26.67.63:7001,172.26.67.63:7002,172.26.67.63:7003,172.26.67.63:7004,172.26.67.63:7005,172.26.67.63:7006
#    
  shardingsphere:
    props:
      sql:
        show: true
    datasource:
      names: master,master0,slave0
      master:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardingsphere-demo?characterEncoding=utf-8
        username: root
        password: lucheng
      master0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardingsphere-demo1?characterEncoding=utf-8
        username: root
        password: lucheng
      slave0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shardingsphere-demo2?characterEncoding=utf-8
        username: root
        password: lucheng
    sharding:
      default-data-source-name: master
#      default-database-strategy:
#        inline:
#          sharding-column: id 
#          algorithm-expression: ds$->{id % 2}
      master-slave-rules:
        ds: 
          master-data-source-name: master
          slave-data-source-names: master
        ds0: 
          master-data-source-name: master0
          slave-data-source-names: slave0
        ds1: 
          master-data-source-name: master0
          slave-data-source-names: slave0
      tables:
        user:
          actual-data-nodes: ds.user,ds$->{0..1}.user_${0..3}
          database-strategy:
            inline:
              sharding-column: data_source 
              algorithm-expression: ds$->{data_source % 2}
          table-strategy:
            inline:
              sharding-column: id
              algorithm-expression: user_${id.longValue() % 4}
#          key-generator:
#            column: id
#            type: SNOWFLAKE
hystrix:
  metrics:
    enabled: true
    polling-interval-ms: 1000
  command:
    default:
      circuitBreaker:
        requestVolumeThreshold: 20
        errorThresholdPercentage: 50
    redisClientGet:
      circuitBreaker:
        enabled: true
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 5000
    redisClientSet:
      circuitBreaker:
        enabled: true
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 5000
    redisClientDelete:
      circuitBreaker:
        enabled: true
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 5000